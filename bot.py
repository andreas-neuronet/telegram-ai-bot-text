import os
import time
import re
import requests
from dotenv import load_dotenv

load_dotenv()

class Config:
    OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
    MODEL = os.getenv('MODEL')

def setup():
    required_vars = ['OPENROUTER_API_KEY', 'TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHANNEL_ID', 'MODEL']
    for var in required_vars:
        if not os.getenv(var):
            raise ValueError(f"Missing {var} in .env file")

def format_for_telegram(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Telegram —Å —É—á—ë—Ç–æ–º MarkdownV2"""
    if not text:
        return ""

    # –®–∞–≥ 1: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
    escaped_text = re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

    # –®–∞–≥ 2: –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = escaped_text.split('\n')
    formatted_lines = []

    for line in lines:
        stripped = line.strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not stripped:
            continue

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∏, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ ":")
        if stripped.endswith(':'):
            line = f"*{stripped}*"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        elif stripped.startswith(('-', '‚Ä¢', '‚Üí')):
            bullet = stripped[0]
            content = stripped[1:].strip()
            line = f"‚Ä¢ {content}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤—Ä–æ–¥–µ "1. –ß—Ç–æ-—Ç–æ", "2. –î—Ä—É–≥–æ–µ"
        elif re.match(r'^\d+\.', stripped):
            parts = stripped.split('.', 1)
            if len(parts) == 2:
                number, content = parts
                line = f"{number}\\. {content.strip()}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—Ç—Ä–æ–∫–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ –ø–æ –∂–µ–ª–∞–Ω–∏—é
        formatted_lines.append(line)

    # –°–æ–µ–¥–∏–Ω—è–µ–º –∞–±–∑–∞—Ü—ã –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
    result = "üìå " + '\n\n'.join(formatted_lines)
    return result

def read_queries(file_path="input.txt"):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return [line.strip() for line in file if line.strip()]
    except Exception as e:
        print(f"File read error: {e}")
        return []

def is_russian(text):
    russian_letters = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
    return any(char in russian_letters for char in text.lower())

def get_ai_response(query):
    try:
        headers = {
            "Authorization": f"Bearer {Config.OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": Config.MODEL,
            "messages": [
                {
                    "role": "system",
                    "content": """–¢—ã - —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –¥–ª—è Telegram:
1. –ò—Å–ø–æ–ª—å–∑—É–π MarkdownV2 (*–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_)
2. –†–∞–∑–¥–µ–ª—è–π –Ω–∞ –∞–±–∑–∞—Ü—ã (–¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏)
3. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
4. –í—ã–¥–µ–ª—è–π –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
–ü—Ä–∏–º–µ—Ä:
*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
‚úÖ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
‚úÖ –ü—Ä–æ—Å—Ç–æ—Ç–∞
‚û°Ô∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ..."""
                },
                {
                    "role": "user",
                    "content": query
                }
            ],
            "max_tokens": 600
        }
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions ",
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            answer = response.json()['choices'][0]['message']['content']
            return answer if is_russian(answer) else None
        else:
            print(f"API Error: {response.status_code} - {response.text[:200]}")
            return None
            
    except Exception as e:
        print(f"Request Error: {str(e)[:200]}")
        return None

def send_to_telegram(message):
    try:
        response = requests.post(
            f"https://api.telegram.org/bot {Config.TELEGRAM_BOT_TOKEN}/sendMessage",
            json={
                "chat_id": Config.TELEGRAM_CHANNEL_ID,
                "text": format_for_telegram(message),
                "parse_mode": "MarkdownV2",
                "disable_web_page_preview": True
            },
            timeout=15
        )
        return response.status_code == 200
    except Exception as e:
        print(f"Telegram Error: {e}")
        return False

def main():
    print("=== üåü Telegram AI Bot ===")
    print(f"üîß Model: {Config.MODEL}")
    
    try:
        setup()
    except ValueError as e:
        print(f"‚ùå Config Error: {e}")
        return
    
    queries = read_queries()
    if not queries:
        print("üì≠ No questions in input.txt")
        return
    
    query = queries[0]
    print(f"üîç Processing: {query[:50]}...")
    
    answer = get_ai_response(query)
    if not answer:
        print("‚ö†Ô∏è Failed to get answer")
        return
    
    print(f"üìù Answer preview:\n{answer[:100]}...")
    
    if send_to_telegram(answer):
        print("‚úÖ Successfully posted to Telegram")
        # Remove processed question
        with open("input.txt", "r", encoding="utf-8") as f:
            lines = f.readlines()
        with open("input.txt", "w", encoding="utf-8") as f:
            f.writelines(lines[1:])
    else:
        print("‚ùå Failed to post")

if __name__ == "__main__":
    main()