import os
import time
import requests
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

class Config:
    OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
    MODEL = os.getenv('MODEL')

def setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    required_vars = ['OPENROUTER_API_KEY', 'TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHANNEL_ID', 'MODEL']
    for var in required_vars:
        if not os.getenv(var):
            raise ValueError(f"–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –≤ .env —Ñ–∞–π–ª–µ")

def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not text:
        return ""
    for char in ['*', '_', '[', ']', '`']:
        text = text.replace(char, '')
    return text.strip()

def read_queries(file_path="input.txt"):
    """–ß—Ç–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return [line.strip() for line in file if line.strip()]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return []

def is_russian(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    russian_letters = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
    text_lower = text.lower()
    return any(char in russian_letters for char in text_lower)

def get_ai_response(query):
    """–ó–∞–ø—Ä–æ—Å –∫ AI –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ OpenRouter API"""
    try:
        headers = {
            "Authorization": f"Bearer {Config.OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://github.com/yourusername/telegram-ai-bot-text",
            "X-Title": "Telegram AI Bot",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": Config.MODEL,
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã - —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –§–æ—Ä–º–∞—Ç: —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏. –î–ª–∏–Ω–∞: 200-500 —Å–∏–º–≤–æ–ª–æ–≤."
                },
                {
                    "role": "user",
                    "content": query
                }
            ],
            "max_tokens": 500,
            "temperature": 0.7
        }
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            answer = response.json()['choices'][0]['message']['content']
            answer = clean_text(answer)
            return answer if is_russian(answer) else None
        else:
            print(f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}): {response.text[:200]}")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)[:200]}")
        return None

def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{Config.TELEGRAM_BOT_TOKEN}/sendMessage",
            json={
                "chat_id": Config.TELEGRAM_CHANNEL_ID,
                "text": message,
                "disable_web_page_preview": True
            },
            timeout=10
        )
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        return False

def main():
    print("=== AI Telegram Bot ===")
    print(f"–ú–æ–¥–µ–ª—å: {Config.MODEL}")
    
    try:
        setup()
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    queries = read_queries()
    if not queries:
        print("‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ input.txt")
        return
    
    print(f"üìã –í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(queries)}")
    
    success = 0
    for i, query in enumerate(queries, 1):
        print(f"\nüîç [{i}/{len(queries)}] –í–æ–ø—Ä–æ—Å: {query[:50]}...")
        
        if not is_russian(query):
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
            continue
            
        answer = get_ai_response(query)
        if not answer:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
            continue
            
        print(f"üìù –û—Ç–≤–µ—Ç ({len(answer)} —Å–∏–º–≤–æ–ª–æ–≤): {answer[:50]}...")
        
        if send_to_telegram(answer):
            print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            success += 1
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
        if i < len(queries):
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫...")
            time.sleep(10)
    
    print(f"\nüéâ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success}/{len(queries)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    main()